@page "/"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@inject AuthStatus AuthService
@using Microsoft.EntityFrameworkCore


<PageTitle>Home</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <p>Redirecting to login...</p>
    NavigationManager.NavigateTo("/login");
}
else
{
    <div>
        <h1>Marketplace</h1>
        <h2>Listings:</h2>

        <!-- Giving inputs for adding a listing -->
        <div>
            <input placeholder="Name" @bind="Name">
            <input placeholder="Price" type="number" @bind="Price">
            <button @onclick="addListing" class="add-listing">Add Listing</button>
        </div>

        <!-- Displaying all listings -->
        <ul class="listing-container">
            @if (listings != null && listings.Any())
            {
                @foreach (var listing in listings)
                {
                    <li class="listing-item">
                        <div class="listing-details">
                            <span class="listing-name">@listing.name</span>
                            <span class="listing-price">$@(listing.price).00</span>
                        </div>
                        <!-- Giving option for purchasing or deleting each listing -->
                        <button @onclick="() => purchaseListing(listing)" class="purchase-button">Purchase</button>
                        <button @onclick="() => removeListing(listing)" class="delete-button">Delete</button>
                    </li>
                }
            }
            else
            {
                <li>No Listings Available</li>
            }
        </ul>

        <!-- Confirm Delete -->
        @if (currListing != null && toDelete == true)
        {
            <p> Selected listing for deletion: @currListing.name</p>
            <p>Are you sure you want to delete @currListing.name?</p>
            <button @onclick="deleteListing" class="delete-button">Confirm</button>
            <button @onclick="cancelSelection" class="purchase-button">Cancel</button>
        }

        <!-- Confirm Purchase  -->
        @if (currListing != null && toDelete == false)
        {
            <p> Selected listing for purchase: @currListing.name</p>
            <p>Are you sure you want to purchase @currListing.name?</p>
            <button @onclick="confirmPurchase" class="purchase-button">Confirm</button>
            <button @onclick="cancelSelection" class="delete-button">Cancel</button>
        }
    </div>
}

<div>
    <button @onclick="logout" class="delete-button">Logout</button>
</div>

@code {
    private List<Listing> listings = new();
    private Listing currListing;
    private bool toDelete = false;
    private string Name;
    private int Price;
    private bool Purchased = false;

    protected override void OnInitialized()
{
    try
    {
        listings = DbContext.Listings.Include(l => l.user).ToList();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading listings: {ex.Message}");
    }
}


    private void cancelSelection() {
        currListing = null;
        toDelete = false;
    }

    private void removeListing(Listing listing) {
        findListing(listing);
        toDelete = true;
    }

    private void purchaseListing(Listing listing) {
        findListing(listing);
        Console.WriteLine(currListing.user);
        toDelete = false;
    }

    private void findListing(Listing listing)
    {
        currListing = listing;
    }

    private void deleteListing()
    {
        try
        {
            if (Purchased) {
                DbContext.Listings.Remove(currListing);
                DbContext.SaveChanges();
                listings.Remove(currListing);
                Purchased = false;
            }
            if (currListing != null && currListing.user == AuthService.currUser)
            {
                DbContext.Listings.Remove(currListing);
                DbContext.SaveChanges();
                listings.Remove(currListing);
            }
            
            currListing = null;
            toDelete = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting listing: {ex.Message}");
        }
    }

    private void confirmPurchase()
{
    try
    {
        Console.WriteLine(currListing.user);
        if (currListing != null)
        {
            if (currListing.user != null)
            {
                var listingName = currListing.name;
                var listingEmail = currListing.user.email;
                NavigationManager.NavigateTo($"/confirmation/{listingName}/{listingEmail}");
                Purchased = true;
                deleteListing();
            }
            else
            {
                Console.WriteLine("Error: The listing has no associated user.");
            }
        }
        else
        {
            Console.WriteLine("Error: No listing selected.");
        }
    }
    catch (Exception ex) {
        Console.WriteLine($"Error confirming purchase: {ex.Message}");
    }
}


    private void addListing() {
    try
    {
        if (!string.IsNullOrWhiteSpace(Name) && Price > 0) {
            // Retrieve the current user from the database to ensure it's the same instance
            var user = DbContext.Users.FirstOrDefault(u => u.id == AuthService.currUser.id);
            if (user == null)
            {
                Console.WriteLine("Error: Current user not found.");
                return;
            }

            var newListing = new Listing
            {
                name = Name,
                price = Price,
                user = user
            };

            DbContext.Listings.Add(newListing);
            DbContext.SaveChanges();
            listings.Add(newListing);

            Name = string.Empty;
            Price = 0;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error adding listing: {ex.Message}");
        Console.WriteLine($"Inner Exception: {ex.InnerException?.Message}");
    }
}


    private void logout() {
        AuthService.Logout();
        NavigationManager.NavigateTo("/login");
    }
}