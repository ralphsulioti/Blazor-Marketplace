@page "/"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AppDbContext DbContext
@inject AuthStatus AuthService
@using Microsoft.EntityFrameworkCore

<PageTitle>Home</PageTitle>

@if (!AuthService.IsAuthenticated)
{
    <p>Redirecting to login...</p>
    NavigationManager.NavigateTo("/login");
}
else
{
    <div>
        <h1>Marketplace</h1>
        <h2>Listings:</h2>

        <!-- Giving inputs for adding a listing -->
        <div>
            <input placeholder="Name" @bind="Name">
            <input placeholder="Price" type="number" @bind="Price">
            <!-- Dropdown for categories selection -->
            <select @bind="Category">
                <option value="">Select Category</option>
                <option value="Miscellaneous">Miscellaneous</option>
                <option value="Electronics">Electronics</option>
                <option value="Books">Books</option>
                <option value="Clothing">Clothing</option>
                <option value="Home Goods">Home Goods</option>
                <option value="Gifts">Gifts</option>
                <option value="Leisure">Leisure</option>
                <option value="Kitchen">Kitchen</option>
                <option value="Athletics">Athletics</option>
            </select>

            <button @onclick="addListing" class="add-listing">Add Listing</button>
        </div>

        <div class="filter-block">
            <div class="filter-container">
                <p>Filter by</p>
                <select @bind="filterCategory" class="filter-dropdown">
                    <option value="">None</option>
                    <option value="Electronics">Electronics</option>
                    <option value="Books">Books</option>
                    <option value="Clothing">Clothing</option>
                    <option value="Home Goods">Home Goods</option>
                    <option value="Gifts">Gifts</option>
                    <option value="Leisure">Leisure</option>
                    <option value="Kitchen">Kitchen</option>
                    <option value="Athletics">Athletics</option>
                    <option value="Miscellaneous">Miscellaneous</option>
                </select>
                <button @onclick="filterByCategory" class="filter-button">Filter</button>
            </div>
        </div>


        <!-- Displaying filtered listings -->
        <ul class="listing-container">
            @if (filteredListings != null && filteredListings.Any())
            {
                @foreach (var listing in filteredListings)
                {
                    <li class="listing-item">
                        <div class="listing-details">
                            <span class="listing-name">@listing.name</span>
                            <span class="listing-price">$@(listing.price).00</span>
                        </div>
                        <!-- Option for purchasing or deleting each listing -->
                        <button @onclick="() => purchaseListing(listing.id)" class="purchase-button">Interested</button>
                        <button @onclick="() => removeListing(listing.id)" class="delete-button">Delete</button>
                    </li>
                }
            }
            else
            {
                <li>No Listings Available</li>
            }
        </ul>


        <!-- Confirm Delete -->
        @if (currListing != null && toDelete == true)
        {
            <p>Selected listing for deletion: @currListing.name</p>
            <p>Are you sure you want to delete @currListing.name?</p>
            <button @onclick="deleteListing" class="delete-button">Confirm</button>
            <button @onclick="cancelSelection" class="purchase-button">Cancel</button>
        }

        <!-- Confirm Purchase  -->
        @if (currListing != null && toDelete == false)
        {
            <p>Interested in selected listing: @currListing.name</p>
            <p>Are you sure you want to express interest in: @currListing.name?</p>
            <button @onclick="confirmPurchase" class="purchase-button">Confirm</button>
            <button @onclick="cancelSelection" class="delete-button">Cancel</button>
        }
    </div>
}

<div>
    <button @onclick="logout" class="delete-button">Logout</button>
</div>

@code {
    private List<Listing> listings = new();
    private List<Listing> filteredListings = new();
    private Listing currListing;
    private bool toDelete = false;
    private string Name;
    private int Price;
    private string Category;
    private string filterCategory;

    protected override void OnInitialized()
    {
        try
        {
            // Eager loading 
            listings = DbContext.Listings.Include(l => l.user).ToList();
            filteredListings = listings;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading listings: {ex.Message}");
        }
    }

    private void cancelSelection() {
        // Clearing the fields
        currListing = null;
        toDelete = false;
    }

    private void removeListing(int listingId) {
        // if toDelete is true then it will prompt you to confirm deletion
        findListing(listingId);
        toDelete = true;
    }

    private void purchaseListing(int listingId) {
        // if toDelete is false then it will prompt you to confirm purchase
        // if and only if currListing is also not null
        findListing(listingId);
        toDelete = false;
    }

    private void findListing(int listingId)
    {
        // Setting currListing to the current Listing object in the database
        currListing = DbContext.Listings.Include(l => l.user).FirstOrDefault(l => l.id == listingId);
    }

    private async Task deleteListing()
    {
        try
        {
            // Retrieving current user from db instead of using AuthService.currUser to prevent db tracking issues
            var User = DbContext.Users.FirstOrDefault(u => u.id == AuthService.currUser.id);

            // Bounds checking and ensuring only listing owner can delete their listing
            if (currListing != null && currListing.user == User)
            {
                // Removing record from database and updating database
                DbContext.Listings.Remove(currListing);
                try
                {
                    // Your code to delete or add a listing
                    await DbContext.SaveChangesAsync();
                }
                catch (DbUpdateException ex)
                {
                    var innerException = ex.InnerException?.Message;
                    Console.WriteLine($"Error modifying database: {innerException}");
                }

                //DbContext.SaveChanges();
                listings.Remove(currListing);
            }

            // Clearing the fields 
            // Note: clear the fields no matter what so the confirmation prompt goes away if user is unauthorized
            currListing = null;
            toDelete = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting listing: {ex.Message}");
        }
    }

    private void confirmPurchase()
    {
        try
        {
            // Bounds checking
            if (currListing != null && currListing.user != null)
            {
                // Retrieving current listing name and email for confirmation page display
                var listingName = currListing.name;
                var listingEmail = currListing.user.email;

                // Navigate user to confirmation page and pass the listing name and email as parameters
                NavigationManager.NavigateTo($"/confirmation/{listingName}/{listingEmail}");
            }
            else
            {
                Console.WriteLine("Error: The listing has no associated user.");
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error confirming purchase: {ex.Message}");
        }
    }

    private async Task addListing() {
        try
        {
            // Bounds checking
            if (!string.IsNullOrWhiteSpace(Name) && Price > 0 && !string.IsNullOrEmpty(Category)) {
                
                // Retrieving user from database rather than just using AuthService.currUser
                // This prevents database tracking conflicts that were happening earlier
                var User = DbContext.Users.FirstOrDefault(u => u.id == AuthService.currUser.id);
                
                // Bounds checking
                if (User == null)
                {
                    Console.WriteLine("Error: Current user not found.");
                    return;
                }
                
                // Creating new Listing object
                var newListing = new Listing
                {
                    name = Name,
                    price = Price,
                    user = User,
                    category = Category
                };

                // Storing new Listing object in database
                DbContext.Listings.Add(newListing);
                try {
                    await DbContext.SaveChangesAsync();
                }
                catch (DbUpdateException ex){
                    Console.WriteLine($"Error updating database: {ex.Message}");
                }
                DbContext.SaveChanges();
                listings.Add(newListing);

                // Clearing the fields
                Name = string.Empty;
                Price = 0;
                Category = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding listing: {ex}");
        }
    }

    private void filterByCategory() {
        try 
        {
            if (string.IsNullOrWhiteSpace(filterCategory)) {
                filteredListings = listings;
            }
            else {
                filteredListings = listings.FindAll(l=> l.category == filterCategory);
            }
        } catch (Exception ex)
        {
            Console.WriteLine($"Error filtering listings: {ex.Message}");
        }
    }
    private void logout() {
        
        // Setting AuthService.currUser to null and AuthService.isAuthenticated to false
        AuthService.Logout();

        // Navigating user back to login page
        NavigationManager.NavigateTo("/login");
    }
}
